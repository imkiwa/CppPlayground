// Parser rules
unit ::= expr ;

expr ::= additive (('+' | '-') additive)*
       | assign_expr
       ;

assign_expr ::= id '=' expr
            ;

additive ::= unary_expr (('*' | '/') unary_expr)*
           ;

unary_expr ::= '-' expr
             | atom
             ;

atom ::= '(' expr ')'
       | num
       | id
       ;

// Lexer rules
num ::= son ('%' mon)? ;
id ::= alpha (alpha | digit)+;

son ::= digit+ ;
mon ::= digit+ ;

digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
alpha ::= 'a' | 'b' | 'c';
